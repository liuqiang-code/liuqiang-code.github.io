<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刘强</title>
    <description>欢迎来到我的个人博客~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 23 Aug 2020 16:29:17 +0800</pubDate>
    <lastBuildDate>Sun, 23 Aug 2020 16:29:17 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>有关爬虫的HTTP网络基础</title>
        <description>&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;

&lt;p&gt;　 在WEB应用程序开发中，HTTP应该算的上是最常用的网络协议之一了吧。在平时的工作也只是简单的使用HTTP的相关知识，但是最近在编写PYTHON爬虫脚本的时候，发现熟悉网络协议是编写爬虫脚本的基础。&lt;/p&gt;

&lt;h3 id=&quot;url和uri&quot;&gt;URL和URI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;URI (Uniform Resource Identifier)即统一资源标记符&lt;/li&gt;
  &lt;li&gt;URL (Universal Resource Locator)即统一资源定位符&lt;/li&gt;
  &lt;li&gt;URN (Universal Resource Name)只命名资源而不指定如何定位资源&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;URL是URI的子集
每一个URL都是URI，但不是每个URI都是URL
URI还包括一类叫做URI即统一资源名称&lt;/p&gt;

&lt;p&gt;URI = URI ∩ URN&lt;/p&gt;

&lt;h3 id=&quot;超文本&quot;&gt;超文本&lt;/h3&gt;

&lt;p&gt;浏览器里看到的网页就是由超文本解析而成的，其网页源码是一系列HTML代码，里面包含了一些列标签&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/HTTP/elements.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http和https&quot;&gt;HTTP和HTTPS&lt;/h3&gt;

&lt;p&gt;HTTP:(Hyper Text Transfer Protocol)中文名叫作超文本传输协议
用于从网络传输超文本数据到本地浏览器的传送协议，能保证高效而准确地传送超文本文档
由万维网协会（World Wide Web Consortium)和 Internet 工作小组 IETF (Internet Engineering TaskForce)共同合作制定的规范
目前广泛使用的是HTTP 1.1版本&lt;/p&gt;

&lt;p&gt;HTTPS (Hyper Text Transfer Protocol over Secure Socket Layer)
是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，简称为HTTPS 安全基础是SSL，因此通过它传输的内容都是经过SSL加密 主要作用可以分为两种：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;建立一个信息安全通道，来保证数据传输的安全&lt;/li&gt;
  &lt;li&gt;确认网站的真实性，凡是使用了HTTPS的网站，都可以通过点击浏览器地址栏的锁头标志来查看网站认证之后的真实信息，也可以通过CA机构颁发的安全签章来查询&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http请求过程&quot;&gt;HTTP请求过程&lt;/h3&gt;

&lt;p&gt;在浏览器中输入一个URL,回车之后便可以在浏览器中观察到页面内容 这个过程是浏览器向网站所在的服务器发送了一个请求 网站服务器接收到这个请求后进行处理和解析，然后返回对应的响应，接着传回给浏览器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/HTTP/http请求过程.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http请求响应格式&quot;&gt;HTTP请求响应格式&lt;/h3&gt;
&lt;p&gt;HTTP请求格式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;request-line&amp;gt;
&amp;lt;headers&amp;gt;
&amp;lt;blank line&amp;gt;
[&amp;lt;request-body&amp;gt;]
说明:第一行必须是一个请求行(request-line),用来说明请求类型,要访问的资源以及所使用的HTTP版本.
      紧接着是一个首部(header)小节,用来说明服务器要使用的附加信息.
      之后是一个空行.
      再后面可以添加任意的其他数据[称之为主体(body)].
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;GET请求格式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.1
Accept: */*
Accept-Language: zh-cn
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)
Host: www.google.cn
Connection: Keep-Alive
说明:请求的第一部分说明了该请求是一个GET请求.该行的第二部分是一个斜杠(/),用来说明请求的是该域名的根目录.该行的最后一部分说明使用的是HTTP1.1版本(另一个可选荐是1.0).
      第2行是请求的第一个首部,HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送.Connection,通常将浏览器操作设置为Keep-Alive
      第三部分,空行,即使不存在请求主体,这个空行也是必需的.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;POST请求格式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST / HTTP1.1
Host:www.wrox.com
User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)
Content-Type:application/x-www-form-urlencoded
Content-Length:40
Connection: Keep-Alive

name=Professional%20Ajax&amp;amp;publisher=Wiley
说明:请求行开始处的GET改为POST,以表示不同的请求类型.
      Content-Type说明了请求主体的内容是如何编码的.浏览器始终以application/x-www-form-urlencoded的格式编码来传送数据,这是针对简单URL编码的MIME类型.Content-Length说明了请求主体的字节数.
      最后请求主体.名称-值对的形式.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;响应格式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;status-line&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;headers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;blank&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
[&lt;span class=&quot;nt&quot;&gt;&amp;lt;response-body&amp;gt;&lt;/span&gt;]

例子：
HTTP/1.1 200 OK
Date: Fri, 22 May 2009 06:07:21 GMT
Content-Type: text/html; charset=UTF-8

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!--body goes here--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
说明:HTTP状态码200,找到资源,并且一切正常.
      Date:生成响应的日期和时间.
      Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8
      HTML源文体.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;http请求头信息&quot;&gt;HTTP请求头信息&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Cookie: 也常用复数形式Cookies,这是网站为了辨别用户进行会话跟踪而存储在用户本地的数据它的主要功能是维持当前访问会话。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Referer: 此内容用来标识这个请求是从哪个页面发过来的，服务器可以拿到这一信息并做相应的处理 如做来源统计、防盗链处理等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;User-Agent: 简称UA，它是一个特殊的字符串头，可以使服务器识别客户使用的操作系统及版本、浏览器及版本等信息。在做爬虫时加上此信息，可以伪装为浏览器；如果不加，很可能会被识别出为爬虫&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Type:也叫互联网媒体类型（Internet Media Type)或者MIME类型，在HTTP协议消息头 中，它用来表示具体请求中的媒体类型信息。例如，text/html代表HTML格式，image/gif代表GIF 图片，application/json代表JSON类型&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http响应头信息&quot;&gt;HTTP响应头信息&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Date: 标识响应产生的时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Last-Modified: 指定资源的最后修改时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Encoding: 指定响应内容的编码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Server: 包含服务器的信息，比如名称、版本号等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content-Type: 文档类型，指定返回的数据类型是什么，如text/html代表返回HTML文档 application/x-javascript 则代表返回 JavaScript 文件，image/jpeg 则代表返回图片&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set-Cookie: 设置Cookies。响应头中的Set-Cookie告诉浏览器需要将此内容放在Cookies中 下次请求携带Cookies请求&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expires: 指定响应的过期时间，可以使代理服务器或浏览器将加载的内容更新到缓存中，如果再次访问时，就可以直接从缓存中获取，降低服务器负载，缩短响应时间&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
转载请注明：&lt;a href=&quot;https://liuqiang-code.github.io/&quot;&gt;刘强的博客&lt;/a&gt; » &lt;a href=&quot;https://liuqiang-code.github.io/2020/08/HTTP/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/08/HTTP/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/08/HTTP/</guid>
        
        <category>HTTP</category>
        
        
      </item>
    
      <item>
        <title>SpringBoot默认存储路径带来的BUG</title>
        <description>&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;

&lt;p&gt;　 接到消息说线上一直运行的一个平台出现了Bug，需要排查原因。收到这个消息的时候一脸惊讶，为什么好好运行的平台会突然出问题。排查运行日志发现是无法读取到文件。核实得知线上的工程以前是以war包的形式运行在Tomcat容器中而最近改成了jar包独立运行。&lt;/p&gt;

&lt;h3 id=&quot;原因&quot;&gt;原因&lt;/h3&gt;

&lt;p&gt;经过排查定位错误代码为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ServletContext servletContext = webApplicationConnect.getServletContext();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在Linux服务器上SpringBoot通过该方式获取的默认存储路径为 /tmp&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Tomcat2SpringBootBug/image1.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Linux 重启时会自动清理该目录，同时也存在一个定时任务清理，显然文件保存该目录很不合理。&lt;/li&gt;
  &lt;li&gt;SpringBoot工程重启后获取的路径是不同的，这就导致每次重启工程后获取文件操作出错。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;处理方案&quot;&gt;处理方案&lt;/h3&gt;
&lt;p&gt;　 在SpringBoot工程的application.propertis配置文件中添加一个文件存储路径，所有有关文件的操作都是以该路径为基准。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;根据系统运行日志排除问题&lt;/li&gt;
  &lt;li&gt;当使用一项新技术时需要对该技术有全面的了解，切记盲目使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
转载请注明：&lt;a href=&quot;https://liuqiang-code.github.io/&quot;&gt;刘强的博客&lt;/a&gt; » &lt;a href=&quot;https://liuqiang-code.github.io/2020/07/Tomcat2SpringBootBug/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/Tomcat2SpringBootBug/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/Tomcat2SpringBootBug/</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>Git笔录</title>
        <description>&lt;h3 id=&quot;介绍&quot;&gt;介绍&lt;/h3&gt;

&lt;p&gt;　　同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。&lt;/p&gt;

&lt;p&gt;　　Git的作者Linus，同样是Linux 的缔造者，为了高度推举开源的大旗和更好的开发和管理Linux，开发出了Git这个优秀的版本版本控制系统&lt;/p&gt;

&lt;p&gt;　　作为一位开发者，熟悉掌握Git是一项非常实用的技能，合理高效的管理代码，不仅可以为我们节约时间，还能提高编码的效率。现在基于Git的版本控制软件有很多，比如：Sourcetree、TortoiseGit等工具，但是本人还是推荐使用命令行操作，因为只有熟练的使用命令行，才能更好的理解底层原理。&lt;/p&gt;

&lt;h3 id=&quot;安装git&quot;&gt;安装Git&lt;/h3&gt;
&lt;p&gt;参考&lt;a href=&quot;https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git&quot;&gt;官方安装教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置git&quot;&gt;配置Git&lt;/h3&gt;

&lt;p&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global user.name &quot;User Name&quot;
git config --global user.email &quot;email@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;–global：使用该参数时，Git会修改 ~/.gitconfig 或 ~/.config/git/config 文件里面的用户名和邮箱地址。该配置会默认作用于所有Git管理的仓库，如果需要更改某个仓库下的用户名和邮箱信息，可以使用 git config 命令，不携带 –global 选项，也可以手动修改 .git/config 文件里面用户和邮箱信息。&lt;/p&gt;

&lt;h3 id=&quot;常用命令&quot;&gt;常用命令：&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;git init（创建Git版本库）&lt;/li&gt;
    &lt;li&gt;git add .（全部添加到暂存区）&lt;/li&gt;
    &lt;li&gt;git commit -m ‘commit message’（提交暂存区的记录到本地仓库）&lt;/li&gt;
    &lt;li&gt;git config (配置和获取Git环境参数)&lt;/li&gt;
    &lt;li&gt;git status (查看版本库状态)&lt;/li&gt;
    &lt;li&gt;git fetch (拉取远程仓库引用到本地版本库)&lt;/li&gt;
    &lt;li&gt;git pull (拉取远程仓库引用到本地工作区)&lt;/li&gt;
    &lt;li&gt;git push (推送本地引用)&lt;/li&gt;
    &lt;li&gt;git checkout (检出操作)&lt;/li&gt;
    &lt;li&gt;git reflog (查看分支的操作记录)&lt;/li&gt;
    &lt;li&gt;git stash (暂存本地修改)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;常见问题&quot;&gt;常见问题：&lt;/h3&gt;

&lt;h4 id=&quot;配置了gitignore的忽略项但是不起作用&quot;&gt;配置了.gitignore的忽略项但是不起作用&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 清理本地库的缓存，并且重新添加版本库。
git rm -r --cached .
git add .
git commit -m &quot;update .gitignore&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;冲突处理流程&quot;&gt;冲突处理流程：&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 本地进行了一次提交操作，这个时候我们准备推送到远程仓库，当执行推送操作时GIT提示报错，要我们先执行拉取操作。
````
➜  GitTest git:(master) git push
To https://github.com/liuqiang-code/GitTest.git
 ! [rejected]        master -&amp;gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/liuqiang-code/GitTest.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
➜  GitTest git:(master)
````
2. 根据Git提示执行git pull操作
````
➜  GitTest git:(master) git pull
Auto-merging hello.txt
CONFLICT (content): Merge conflict in hello.txt
Automatic merge failed; fix conflicts and then commit the result.
➜  GitTest git:(master) ✗ 
````
3. GIT提示：尝试自动合并hello.txt文件失败，提示要我们手动解决冲突然后再次提交。
4. 根据提示，首先查看冲突文件 hello.txt，GIT使用 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; ======= &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 标记冲突行。&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD 和 ======= 之间的是本地记录，而 ======= 和 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; c53ee6465cc033d1eb38c333612bc98e444afe1f 之间的是远程记录。
````
➜  GitTest git:(master) ✗ cat hello.txt
hello git
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
hello weiwei
=======
BigStrong is Handsome
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; c53ee6465cc033d1eb38c333612bc98e444afe1f
➜  GitTest git:(master) ✗
````
5. 然后我们再根据实际要求手动处理冲突，当我们手动处理完冲突后使用git status 查看版本库状态时会提示我们再次执行add和commit操作，执行完commit操作后提示fix conflicts，GIT默认（是否解决只有自己知道）我们解决了冲突，因为我们执行了commit操作，最后查看状态提示执行推送操作。
````
➜  GitTest git:(master) ✗ cat hello.txt
hello git
hello weiwei and BigStrong is Handsome
➜  GitTest git:(master) ✗ git status
On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commits each, respectively.
  (use &quot;git pull&quot; to merge the remote branch into yours)
You have unmerged paths.
  (fix conflicts and run &quot;git commit&quot;)
  (use &quot;git merge --abort&quot; to abort the merge)
Unmerged paths:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to mark resolution)
	both modified:   hello.txt
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
➜  GitTest git:(master) ✗ git add hello.txt
➜  GitTest git:(master) ✗ git commit -m &quot;fix conflicts&quot;
[master 6d705a0] fix conflicts
➜  GitTest git:(master) git status
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use &quot;git push&quot; to publish your local commits)
nothing to commit, working tree clean
➜  GitTest git:(master) git push
Counting objects: 6, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (6/6), 551 bytes | 551.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0)
To https://github.com/liuqiang-code/GitTest.git
   	c53ee64..6d705a0  master -&amp;gt; master
````
6. 总结：养成使用 git status 命令习惯。学会看提示信息，GIT 的提示信息非常友善，利用提示信息可以很大的提高工作效率。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;远程分支有提交本地修改未提交可以直接git-pull吗&quot;&gt;远程分支有提交，本地修改未提交可以直接git pull吗？&lt;/h4&gt;
&lt;p&gt;1、首先通过 git status 查看本地状态&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  GitTest git:(master) git status
On branch master
Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.
  (use &quot;git pull&quot; to update your local branch)

nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2、修改文件并且查看状态&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  GitTest git:(master) ll
total 8
-rw-r--r--  1 apple  staff    23B  8 23 10:32 hello.txt
➜  GitTest git:(master) echo 'modify file' &amp;gt;&amp;gt; hello.txt
➜  GitTest git:(master) ✗
➜  GitTest git:(master) ✗
➜  GitTest git:(master) ✗ git status
On branch master
Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.
  (use &quot;git pull&quot; to update your local branch)

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

	modified:   hello.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3、不提交修改，直接使用git pull拉取提交&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  GitTest git:(master) ✗ git status
On branch master
Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.
  (use &quot;git pull&quot; to update your local branch)

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

	modified:   hello.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
➜  GitTest git:(master) ✗ git pull
Updating 5be3084..6d705a0
error: Your local changes to the following files would be overwritten by merge:
	hello.txt
Please commit your changes or stash them before you merge.
Aborting
➜  GitTest git:(master) ✗
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;4、总结：git会提示操作用户本地修改未提交直接git pull时本地修改会被覆盖，请先commit或者stash修改。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
转载请注明：&lt;a href=&quot;https://liuqiang-code.github.io/&quot;&gt;刘强的博客&lt;/a&gt; » &lt;a href=&quot;https://liuqiang-code.github.io/2020/07/GitCourse/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/GitCourse/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/GitCourse/</guid>
        
        <category>Git</category>
        
        
      </item>
    
  </channel>
</rss>
